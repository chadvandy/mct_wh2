.. lua:class:: mct
    :module:







    .. lua:method:: log(text)





        :param text: 
        :type text: any

    .. lua:method:: logf(text, ...)





        :param text: 
        :type text: any
        :param vararg: 
        :type vararg: any

    .. lua:method:: err(text)





        :param text: 
        :type text: any

    .. lua:method:: errf(text, ...)





        :param text: 
        :type text: any
        :param vararg: 
        :type vararg: any

    .. lua:method:: warn(text)





        :param text: 
        :type text: any

    .. lua:method:: mp_prep()


        triggers the listeners for MP communication events!




    .. lua:method:: load_and_start(loading_game_context, is_mp)





        :param loading_game_context: 
        :type loading_game_context: any
        :param is_mp: 
        :type is_mp: any

    .. lua:method:: load_mod(filename, filename_for_out)


        For internal use, loads specific mod files located in `script/mct/settings/`. 

        Any .lua file found in here is given the MCT manager as the variable `mct` within the full scope of the file.

        :param filename: The filename being required and loaded.
        :type filename: str
        :param filename_for_out: The original filename with the full directory path still included; used for outputs.
        :type filename_for_out: str

    .. lua:method:: load_mods()






    .. lua:method:: set_selected_mod(mod_name)





        :param mod_name: 
        :type mod_name: any

    .. lua:method:: get_selected_mod_name()






    .. lua:method:: get_selected_mod()






        :rtype: mct_mod

    .. lua:method:: has_mod_with_name_been_registered(mod_name)





        :param mod_name: 
        :type mod_name: any

    .. lua:method:: get_mod_with_name(mod_name)





        :param mod_name: 
        :type mod_name: any

    .. lua:method:: finalize_new()






    .. lua:method:: finalize()


        TODO use new system!

        Internal use only. Triggers all the functionality for "Finalize Settings!"


    .. lua:method:: get_mod_by_key(mod_name)


        Getter for the :lua:class:`mct_mod` with the supplied key.



        :param mod_name: Unique identifier for the desired mct_mod.
        :type mod_name: str

        :rtype: mct_mod

    .. lua:method:: get_mods()






    .. lua:method:: get_mods_from_file(filepath)





        :param filepath: 
        :type filepath: any

    .. lua:method:: register_mod(mod_name)


        Primary function to begin adding settings to a "mod".

        Calls the internal function :lua:class:`mct_mod.new`.

        :param mod_name: The identifier for this mod.
        :type mod_name: str

        :rtype: mct_mod

    .. lua:method:: is_mct_mod(obj)


        Type-checker for :lua:class:`mct_mod`s



        :param obj: Tested value.
        :type obj: any
        :return: Whether it passes.
        :rtype: boolean

    .. lua:method:: is_mct_option(obj)


        Type-checker for :lua:class:`mct_option`s



        :param obj: Tested value.
        :type obj: any
        :return: Whether it passes.
        :rtype: boolean

    .. lua:method:: is_mct_section(obj)


        Type-checker for :lua:class:`mct_section`s



        :param obj: Tested value.
        :type obj: any
        :return: Whether it passes.
        :rtype: boolean

    .. lua:method:: is_valid_option_type(val)


        Type-checker for :lua:class:`mct_option` types.



        :param val: Tested value.
        :type val: any
        :return: Whether it passes.
        :rtype: boolean

    .. lua:method:: get_valid_option_types()






    .. lua:method:: get_valid_option_types_table()







